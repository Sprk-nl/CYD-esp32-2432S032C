# Change the naming below, they will be the names used in Home Assistant
#
substitutions:
  device_name: cyd-v-test1
  friendly_name: CYD


esphome:
  name: $device_name
  friendly_name: $friendly_name

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Your_HASS_KEY"

ota:
  password: "YOUR_OTA_KEY"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Cyd-V-Test1 Fallback Hotspot"
    password: "YOURS_AGAIN"

captive_portal:

# ============================================================ 
# ESPHome Display related setup
#
# Create a font to use, add and remove glyphs as needed. 
font:
  - file: 'fonts/Arimo-Regular.ttf'
    id: arimo24
    size: 24
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzåäö"
  - file: 'fonts/Arimo-Regular.ttf'
    id: arimo96
    size: 96
    glyphs: ":0123456789"

# Create a Home Assistant blue color
color:
  - id: ha_blue
    hex: 51c0f2

# Create an ESPHome logo image
image:
  - file: "images/esphome.png"
    id: esphome_image
    type: RGB24



# Create a time sensor, this will fetch time from Home Assistant
time:
  - platform: homeassistant
    id: esptime

# ============================================================ 
# Hardware related setup
#
# Setup SPI busses for the display and TFT
# The ESP32-2432S028R uses separate SPI buses for display and touch
spi:
  - id: spi_tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12


# Setup a pin to control the backlight
output:
  - platform: ledc
    pin: GPIO27
    id: backlight_pwm
    inverted: false
  - platform: ledc
    pin: GPIO4
    id: gpio_4
    inverted: true
  - platform: ledc
    pin: GPIO16
    id: gpio_16
    inverted: true
  - platform: ledc
    pin: GPIO17
    id: gpio_17
    inverted: true

# Using a 240 * 320 3,2 inch screen
#
# Setup the ili9xxx platform
#
# Display is used as 240x320 by default so we rotate it to 90°
#
# We print date and time wth the strftime() function, see the ESPHome documentation to 
# format date and atime to your locale.
#
display:
 - platform: ili9xxx
   id: esp_display
   model: ili9342
   spi_id: spi_tft
   cs_pin: GPIO15
   dc_pin: GPIO2
   invert_colors: true
   color_order: RGB
   #rotation: 90
   lambda: |-
      it.fill(id(ha_blue));
      it.image(120,10, id(image_veerle));
      it.strftime(100, 100, id(arimo24), Color(id(red)), "%Y-%m-%d", id(esptime).now());
      it.strftime(40, 120, id(arimo96), Color(id(black)),"%H:%M", id(esptime).now());
      
      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.printf(280, 80, id(font3), Color(id(green)), TextAlign::BASELINE_RIGHT , "%.1f°", id(outside_temperature).state);
        }


light:
  - platform: rgb
    id: light_rgb
    name: "RGB LED"
    red: gpio_4
    green: gpio_16
    blue: gpio_17

  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON    

    effects:
        - pulse:
        - pulse:
            name: "Fast Pulse"
            transition_length: 0.5s
            update_interval: 0.5s
            min_brightness: 0%
            max_brightness: 100%

sensor:
  - platform: adc
    pin: GPIO34
    name: "Light detection"
    update_interval: 60s
  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.openweathermap_feels_like_temperature
    internal: true


i2c:
  id: i2c_touch
  sda: 33
  scl: 32
  scan: true

# Set up the Goodix GT911 touch platform
# Neglect the interrupt and reset pin.
# GT911 supports a maximum of 4 touch key and guestures
# GT911 provides a standard I2C interface for SCL and SDA to communicate
# It is strongly recommended that transmission rate be kept at or below 400Kbps

touchscreen:
  platform: gt911
  i2c_id: i2c_touch
  display: esp_display
  id: my_touchscreen
  #interrupt_pin: GPIO25
  # update_interval: 50ms
  # address: 0x5D


  transform:
    mirror_x: false
    mirror_y: false
    swap_xy: false

  on_touch:
    - logger.log:
          format: Touch at (%d, %d)
          args: [touch.x, touch.y]
    - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              touch.x,
              touch.y,
              touch.x_raw,
              touch.y_raw
              );
    - light.turn_on:
        id: light_rgb
        effect: pulse


# Setup two binary sensors for the two areas for touch
binary_sensor:
  - platform: touchscreen
    name: Button A
    x_min: 20
    x_max: 140
    y_min: 60
    y_max: 180

  - platform: touchscreen
    name: Button B
    x_min: 180
    x_max: 300
    y_min: 60
    y_max: 180
